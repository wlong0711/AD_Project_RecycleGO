// RegisterPage
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'package:recycle_go/models/company_logo.dart';
import 'login.dart'; // Import the LoginPage

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  bool _isPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  bool _isLoading = false;

  String _selectedCountryCode = '+60'; // Default country code, you can set it to any valid one
  final List<String> _countryCodes = ['+60', '+1', '+91', '+44', '+61', '+65']; // Add more country codes as needed

  bool _hasAttemptedSubmit = false; // Add this to track if the user has attempted to submit the form
  final FocusNode _phoneFocusNode = FocusNode(); // Add this to track focus on the phone number field

  @override
  void initState() {
    super.initState();
    // Add a listener to the focus node to update the UI when the field loses focus
    _phoneFocusNode.addListener(() {
      if (!_phoneFocusNode.hasFocus) {
        setState(() {});
      }
    });
  }

  @override
  void dispose() {
    // Dispose the focus node when the state object is disposed
    _phoneFocusNode.dispose();
    super.dispose();
  }
  bool isValidPhoneNumber(String phoneNumber) {
    // Update this regex or method according to the country code or general international formats
    // Here's a simple placeholder for general phone number validation
    return RegExp(r'^\+\d{1,3}\d{7,14}$').hasMatch(phoneNumber);
  }

  Future<void> _register() async {
    setState(() {
      _hasAttemptedSubmit = true;
    });

    String fullPhoneNumber = _selectedCountryCode + _phoneNumberController.text;
    if (!isValidPhoneNumber(fullPhoneNumber)) {
      print('Invalid phone number');
      return;
    }

    try {
      setState(() {
        _isLoading = true; // Show the loading overlay
      });
      // Create a new user with email and password
      UserCredential userCredential =
          await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // Send email verification
      await userCredential.user!.sendEmailVerification();

      // Get the unique UID generated by Firebase for the new user
      String uid = userCredential.user!.uid;

      // Add additional user data to Firestore
      await FirebaseFirestore.instance
          .collection('users')
          .doc(uid) // Use the UID as the document ID
          .set({
        'userId': uid,  // Save the UID as 'userId' or similar field for later use
        'email': _emailController.text,
        'username': _usernameController.text,
        'points': 0,
        'level': 0, // 0 for user, 1 for admin
        'address': _addressController.text,
        'phoneNumber': fullPhoneNumber,
        'isVerified': false, // Mark the user as not verified initially
      });

      // Registration successful, show dialog
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('Registration Successful'),
            content: const Text(
                'You have successfully created a new account. Please check your email for verification.'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // Navigate to the LoginPage after successful registration
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const LoginPage()),
                  );
                },
                child: const Text('OK'),
              ),
            ],
          );
        },
      );
    } catch (e) {
      print("Error during registration: $e");
      // Handle registration failure (show a snackbar, etc.)
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false; // Hide the loading overlay after registration is done or fails
        });
      }
    }
  }

  Future<void> _registerAdmin() async {
    setState(() {
      _isLoading = true; // Show the loading overlay
    });
    print('AdminRegister');
    try {
      // Create a new user with email and password
      UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // Get the unique UID generated by Firebase for the new user
      String uid = userCredential.user!.uid;

      // Add additional user data to Firestore
      await FirebaseFirestore.instance.collection('users').doc(uid).set({
        'userId': uid,
        'email': _emailController.text,
        'username': _usernameController.text,
        'points': 0,
        'level': 1, // Set level to 1 for admin
        'address': _addressController.text,
        'phoneNumber': _selectedCountryCode + _phoneNumberController.text,
        'isVerified': true, // Admin accounts are verified by default
      });

      // You might want to perform additional steps here to finalize the admin setup

      // Optionally show a confirmation message
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('Admin Registration Successful'),
            content: const Text('The admin account has been created successfully.'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('OK'),
              ),
            ],
          );
        },
      );
    } catch (e) {
      print("Error during admin registration: $e");
      // Handle registration failure (show a snackbar, etc.)
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false; // Hide the loading overlay
        });
      }
    }
  }

  Widget _buildLoadingOverlay() {
    return Stack(
      children: [
        // Full screen semi-transparent overlay
        Positioned.fill(
          child: Container(
            color: Colors.grey.withOpacity(0.5), // Semi-transparent grey color
          ),
        ),
        // Centered loading indicator
        Center(
          child: Container(
            width: 80, // Set the width of the overlay
            height: 80, // Set the height of the overlay
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.5), // Semi-transparent black for the loading box
              borderRadius: BorderRadius.circular(10), // Rounded corners for the loading box
            ),
            child: const Center(
              child: CircularProgressIndicator(),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildLoginText(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to the LoginPage when the text is clicked
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const LoginPage()),
        );
      },
      child: const Text(
        'Already a member? Login here',
        style: TextStyle(
          color: Colors.green,
        ),
      ),
    );
  }

  Widget _buildPhoneNumberInputBox() {
    return SizedBox(
      width: 300, // Adjust this width to match the width of your other TextFields
      child: Row(
        children: <Widget>[
          // Dropdown for selecting country code
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey),
              borderRadius: BorderRadius.circular(5.0),
            ),
            child: DropdownButtonHideUnderline(
              child: DropdownButton<String>(
                value: _selectedCountryCode,
                iconSize: 24,
                elevation: 16,
                style: const TextStyle(color: Colors.black, fontSize: 16),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedCountryCode = newValue!;
                  });
                },
                items: _countryCodes.map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
              ),
            ),
          ),

          // Expanded TextField for entering the remaining phone number
          Expanded(
            child: TextField(
              controller: _phoneNumberController,
              decoration: InputDecoration(
                labelText: 'Phone Number',
                border: const OutlineInputBorder(),
                errorText: !isValidPhoneNumber(_selectedCountryCode + _phoneNumberController.text) && _hasAttemptedSubmit
                    ? 'Enter a valid number.'
                    : null,
              ),
              keyboardType: TextInputType.phone,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    CompanyLogo companyLogo = Provider.of<CompanyLogo>(context, listen: false);
    return Stack(
      children: [
        Positioned.fill(
            child: Image.asset(
              'assets/images/startup background.png',
              fit: BoxFit.cover,
            ),
          ),
        Scaffold(
          backgroundColor: Colors.transparent,
          appBar: AppBar(
            backgroundColor: Colors.transparent,
          ),
          body: Center(
            child: SingleChildScrollView(
              // Added SingleChildScrollView for better UX on smaller devices
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Company Logo
                    SizedBox(
                      width: 100,
                      height: 100,
                      child: companyLogo.image, // Use the provided CompanyLogo's image
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Register',
                      style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25),
                    ),
                    const SizedBox(height: 20),
                    // Input Boxes and Buttons
                    _buildInputBox("Email", _emailController, isPassword: false),
                    _buildInputBox("Username", _usernameController, isPassword: false),
                    _buildInputBox("College Address", _addressController, isPassword: false),
                    _buildPhoneNumberInputBox(),
                    _buildPasswordInputBox(),
                    _buildConfirmPasswordInputBox(),
                    const SizedBox(height: 10),
                    _buildButton("Register", Colors.green),
                    const SizedBox(height: 20),
                    // _buildOrSeparator(),
                    // const SizedBox(height: 10),
                    // _buildOtherLoginMethods(),
                    // const SizedBox(height: 20),
                    _buildLoginText(context),
                  ],
                ),
              ),
            ),
          ),
        ),
        if (_isLoading) _buildLoadingOverlay(),
      ],
    );
  }

  Widget _buildInputBox(
  String label,
  TextEditingController controller, {
  bool isPassword = false,
  bool showWarning = false,
  }) {
    return SizedBox(
      width: 300,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          TextField(
            controller: controller,
            obscureText: isPassword && !_isPasswordVisible,
            onChanged: (value) {
              // Only update the state for the phone number field if it's not empty
              if (controller == _phoneNumberController && value.isNotEmpty) {
                setState(() {});
              }
            },
            decoration: InputDecoration(
              labelText: controller.text.isEmpty ? label : '',
              border: const OutlineInputBorder(),
              // Only show the error text if the user has attempted to submit the form or the field is not empty
              errorText: controller == _phoneNumberController && showWarning && (_hasAttemptedSubmit || controller.text.isNotEmpty) ? 'Please enter a valid phone number with +60.' : null,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPasswordInputBox() {
    return SizedBox(
      width: 300,
      child: TextField(
        controller: _passwordController,
        obscureText: !_isPasswordVisible,
        onChanged: (value) {
          // Handle the input change and update the state as needed
          setState(() {});
        },
        decoration: InputDecoration(
          labelText: _passwordController.text.isEmpty ? 'Password (6 digits or above)' : '',
          border: const OutlineInputBorder(),
          suffixIcon: GestureDetector(
            onTap: () {
              setState(() {
                _isPasswordVisible = !_isPasswordVisible;
              });
            },
            child: Icon(
              _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildConfirmPasswordInputBox() {
    return SizedBox(
      width: 300,
      child: TextField(
        controller: _confirmPasswordController,
        obscureText: !_isConfirmPasswordVisible,
        onChanged: (value) {
          // Handle the input change and update the state as needed
          setState(() {});
        },
        decoration: InputDecoration(
          labelText:
              _confirmPasswordController.text.isEmpty ? 'Confirm Password' : '',
          border: const OutlineInputBorder(),
          suffixIcon: GestureDetector(
            onTap: () {
              setState(() {
                _isConfirmPasswordVisible = !_isConfirmPasswordVisible;
              });
            },
            child: Icon(
              _isConfirmPasswordVisible
                  ? Icons.visibility
                  : Icons.visibility_off,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildButton(String label, Color color) {
    return Container(
      width: 200,
      height: 50,
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(10),
      ),
      child: TextButton(
        onPressed: _register,
        child: Center(
          child: Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: RegisterPage(),
  ));
}
