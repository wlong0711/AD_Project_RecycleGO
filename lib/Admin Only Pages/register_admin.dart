// RegisterPage
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'package:recycle_go/Shared%20Pages/StartUp%20Pages/login.dart';
import 'package:recycle_go/models/company_logo.dart';

class RegisterAdminPage extends StatefulWidget {
  const RegisterAdminPage({super.key});

  @override
  _RegisterAdminPageState createState() => _RegisterAdminPageState();
}

class _RegisterAdminPageState extends State<RegisterAdminPage> {
  bool _isPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  bool _isLoading = false;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  String _selectedCountryCode = '+60'; // Default country code, you can set it to any valid one
  final List<String> _countryCodes = ['+60', '+1', '+91', '+44', '+61', '+65']; // Add more country codes as needed

  bool _hasAttemptedSubmit = false; // Add this to track if the user has attempted to submit the form
  final FocusNode _phoneFocusNode = FocusNode(); // Add this to track focus on the phone number field

  @override
  void initState() {
    super.initState();
    // Add a listener to the focus node to update the UI when the field loses focus
    _phoneFocusNode.addListener(() {
      if (!_phoneFocusNode.hasFocus) {
        setState(() {});
      }
    });
  }

  @override
  void dispose() {
    // Dispose the focus node when the state object is disposed
    _phoneFocusNode.dispose();
    super.dispose();
  }
  bool isValidPhoneNumber(String phoneNumber) {
    // Update this regex or method according to the country code or general international formats
    // Here's a simple placeholder for general phone number validation
    return RegExp(r'^\+\d{1,3}\d{7,14}$').hasMatch(phoneNumber);
  }

  Future<void> _registerAdmin() async {
    setState(() {
      _isLoading = true; // Show the loading overlay
    });
    print('AdminRegister');
    try {
      // Create a new user with email and password
      UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // Get the unique UID generated by Firebase for the new user
      String uid = userCredential.user!.uid;

      // Add additional user data to Firestore
      await FirebaseFirestore.instance.collection('users').doc(uid).set({
        'userId': uid,
        'email': _emailController.text,
        'username': _usernameController.text,
        'points': 0,
        'level': 1, // Set level to 1 for admin
        'address': _addressController.text,
        'phoneNumber': _selectedCountryCode + _phoneNumberController.text,
        'isVerified': true, // Admin accounts are verified by default
      });

      await _showAdminRegistrationSuccessDialog(context);

    } catch (e) {
      print("Error during admin registration: $e");
      // Handle registration failure (show a snackbar, etc.)
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false; // Hide the loading overlay
        });
      }
    }
  }

  Future<void> _showAdminRegistrationSuccessDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false, // The user must tap a button to close the dialog
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Admin Registration Successful!'),
          content: const Text('The admin account has been created successfully. Do you want to continue with this account or logout to use the new account?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
                // Navigate back to UserProfilePage
                Navigator.pop(context);
              },
              child: const Text('Continue'),
            ),
            TextButton(
              onPressed: () async {
                await FirebaseAuth.instance.signOut();
                // Navigate to LoginPage
                Navigator.of(context).pushAndRemoveUntil(
                  MaterialPageRoute(builder: (context) => const LoginPage()),
                  (Route<dynamic> route) => false,
                );
              },
              child: const Text('Logout'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildLoadingOverlay() {
    return Stack(
      children: [
        // Full screen semi-transparent overlay
        Positioned.fill(
          child: Container(
            color: Colors.grey.withOpacity(0.5), // Semi-transparent grey color
          ),
        ),
        // Centered loading indicator
        Center(
          child: Container(
            width: 80, // Set the width of the overlay
            height: 80, // Set the height of the overlay
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.5), // Semi-transparent black for the loading box
              borderRadius: BorderRadius.circular(10), // Rounded corners for the loading box
            ),
            child: const Center(
              child: CircularProgressIndicator(),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPhoneNumberInputBox() {
    String? errorText;
    bool showError = false;

    if (_hasAttemptedSubmit || _phoneNumberController.text.isNotEmpty) {
      errorText = !isValidPhoneNumber(_selectedCountryCode + _phoneNumberController.text) ? 'Enter a valid number.' : null;
      showError = errorText != null;
    }

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Container(
          width: 300, // Maintain the width consistency
          decoration: BoxDecoration(
            border: Border.all(color: showError ? Colors.red : Colors.grey),
            borderRadius: BorderRadius.circular(5.0),
          ),
          child: Row(
            children: <Widget>[
              // Dropdown for selecting country code
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.horizontal(left: Radius.circular(4.0)),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedCountryCode,
                    iconSize: 24,
                    elevation: 16,
                    style: TextStyle(color: showError ? Colors.red : Colors.black, fontSize: 16),
                    onChanged: (String? newValue) {
                      setState(() {
                        _selectedCountryCode = newValue!;
                        // To trigger the validation
                        _phoneFocusNode.requestFocus();
                        _phoneFocusNode.unfocus();
                      });
                    },
                    items: _countryCodes.map<DropdownMenuItem<String>>((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                  ),
                ),
              ),
              // Expanded TextField for entering the remaining phone number
              Expanded(
                child: TextField(
                  focusNode: _phoneFocusNode,
                  controller: _phoneNumberController,
                  style: TextStyle(color: showError ? Colors.red : Colors.black),
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    labelStyle: TextStyle(color: showError ? Colors.red : Colors.grey),
                    contentPadding: const EdgeInsets.symmetric(vertical: 10),
                    border: InputBorder.none,
                  ),
                  keyboardType: TextInputType.phone,
                  onEditingComplete: () {
                    // To trigger the validation
                    _phoneFocusNode.requestFocus();
                    _phoneFocusNode.unfocus();
                  },
                ),
              ),
            ],
          ),
        ),
        // Error message
        showError
          ? Padding(
            padding: const EdgeInsets.only(top: 4, left: 52, bottom: 4,),
            child: Row(
              children: [
                Icon(Icons.error_outline, color: Colors.red, size: 12),
                SizedBox(width: 5),
                Text(
                  errorText ?? '',
                  style: TextStyle(color: Colors.red, fontSize: 12),
                ),
              ],
            ),
          )
          : SizedBox(height: 23), // Reserve space for the error message
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    CompanyLogo companyLogo = Provider.of<CompanyLogo>(context, listen: false);
    return Stack(
      children: [
        Positioned.fill(
            child: Image.asset(
              'assets/images/startup background.png',
              fit: BoxFit.cover,
            ),
          ),
        Scaffold(
          key: _scaffoldKey,
          backgroundColor: Colors.transparent,
          appBar: AppBar(
            backgroundColor: Colors.transparent,
          ),
          body: Center(
            child: SingleChildScrollView(
              // Added SingleChildScrollView for better UX on smaller devices
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Company Logo
                    SizedBox(
                      width: 100,
                      height: 100,
                      child: companyLogo.image,
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      'Admin Register',
                      style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25),
                    ),
                    const SizedBox(height: 10),
                    // Input Boxes and Buttons
                    _buildInputBox("Email", _emailController, isEmail: true),
                    _buildInputBox("Username", _usernameController, isUsername: true),
                    _buildInputBox("College Address", _addressController, isAddress: true),
                    _buildPhoneNumberInputBox(),
                    _buildInputBox("Password", _passwordController, isPassword: true),
                    _buildInputBox("Confirm Password", _confirmPasswordController, isConfirmPassword: true),
                    const SizedBox(height: 10),
                    _buildButton("Register", Colors.green),
                    const SizedBox(height: 20),
                    // _buildOrSeparator(),
                    // const SizedBox(height: 10),
                    // _buildOtherLoginMethods(),
                    // const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ),
        ),
        if (_isLoading) _buildLoadingOverlay(),
      ],
    );
  }

  Widget _buildInputBox(
    String label,
    TextEditingController controller, {
    bool isPassword = false,
    bool isEmail = false,
    bool isUsername = false,
    bool isAddress = false,
    bool isPhoneNumber = false,
    bool isConfirmPassword = false,
  }) {
    // Determine if there's an error
    bool hasError = _getHasError(controller,
        isEmail: isEmail,
        isUsername: isUsername,
        isAddress: isAddress,
        isPhoneNumber: isPhoneNumber,
        isPassword: isPassword,
        isConfirmPassword: isConfirmPassword);

    // Get the error widget
    Widget? errorWidget = _getInputErrorText(controller,
        isEmail: isEmail,
        isUsername: isUsername,
        isAddress: isAddress,
        isPhoneNumber: isPhoneNumber,
        isPassword: isPassword,
        isConfirmPassword: isConfirmPassword);

    // Use the appropriate border depending on whether there is an error
    OutlineInputBorder border = OutlineInputBorder(
      borderSide: BorderSide(
        color: hasError ? Colors.red : Colors.grey,
      ),
    );

    return Container(
      width: 300, // Set the width of the input field container
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          TextField(
            controller: controller,
            obscureText: (isPassword && !_isPasswordVisible) || (isConfirmPassword && !_isConfirmPasswordVisible),
            decoration: InputDecoration(
              labelText: controller.text.isEmpty ? label : '',
              border: border,
              enabledBorder: border,
              focusedBorder: border,
              errorBorder: hasError ? border : null,
              focusedErrorBorder: hasError ? border : null,
              labelStyle: TextStyle(color: hasError ? Colors.red : Colors.grey),
              suffixIcon: (isPassword || isConfirmPassword) ? GestureDetector(
                onTap: () {
                  setState(() {
                    if (isPassword) {
                      _isPasswordVisible = !_isPasswordVisible;
                    } else if (isConfirmPassword) {
                      _isConfirmPasswordVisible = !_isConfirmPasswordVisible;
                    }
                  });
                },
                child: Icon(
                  (isPassword && _isPasswordVisible) || (isConfirmPassword && _isConfirmPasswordVisible)
                    ? Icons.visibility
                    : Icons.visibility_off,
                ),
              ) : null,
            ),
          ),
          hasError ? errorWidget ?? SizedBox.shrink() : SizedBox(height: 23),
        ],
      ),
    );
  }

  bool _getHasError(
    TextEditingController controller, {
    required bool isEmail,
    bool isUsername = false,
    bool isAddress = false,
    bool isPhoneNumber = false,
    bool isPassword = false,
    bool isConfirmPassword = false,
  }) {
    if (_hasAttemptedSubmit || controller.text.isNotEmpty) {
      if (_hasAttemptedSubmit || controller.text.isNotEmpty) {
          if (isEmail && !isValidEmail(controller.text)) {
            return true;
          }
          if (isUsername && controller.text.isEmpty) {
            return true;
          }
          if (isAddress && controller.text.isEmpty) {
            return true;
          }
          if (isPhoneNumber && !isValidPhoneNumber(_selectedCountryCode + controller.text)) {
            return true;
          }
          if (isPassword && controller.text.length < 6) {
            return true;
          }
          if (isConfirmPassword && controller.text != _passwordController.text) {
            return true;
          }
        }
    }
    return false;
  }

  bool isValidEmail(String email) {
    // Regular expression pattern for validating an email address
    RegExp emailRegexp = RegExp(
      r'^[^@\s]+@[^@\s]+\.[^@\s]+$',
      caseSensitive: false,
      multiLine: false,
    );
    return emailRegexp.hasMatch(email);
  }

  Widget? _getInputErrorText(
    TextEditingController controller, {
    required bool isEmail,
    required bool isUsername,
    required bool isAddress,
    required bool isPhoneNumber,
    required bool isPassword,
    required bool isConfirmPassword,
  }) {
    String? errorMessage;

    if (_hasAttemptedSubmit || controller.text.isNotEmpty) {
        if (isEmail && !isValidEmail(controller.text)) {
          errorMessage = 'Please enter a valid email address.';
        }
        if (isUsername && controller.text.isEmpty) {
          errorMessage = 'Please enter your username.';
        }
        if (isAddress && controller.text.isEmpty) {
          errorMessage = 'Please enter your address.';
        }
        if (isPhoneNumber && !isValidPhoneNumber(_selectedCountryCode + controller.text)) {
          errorMessage = 'Enter a valid phone number.';
        }
        if (isPassword && controller.text.length < 6) {
          errorMessage = 'Password must be at least 6 characters.';
        }
        if (isConfirmPassword && controller.text != _passwordController.text) {
          errorMessage = 'Passwords do not match.';
        }
      }

    if (errorMessage != null) {
      return Padding(
        padding: const EdgeInsets.only(top: 4, bottom: 4, left: 7,),
        child: Row(
          children: [
            Icon(Icons.error_outline, color: Colors.red, size: 12),
            SizedBox(width: 5),
            Text(
              errorMessage,
              style: TextStyle(color: Colors.red, fontSize: 12),
            ),
          ],
        ),
      );
    }
    return null; // Return null if there is no error
  }

  Future<void> _attemptRegister(BuildContext context) async {
    setState(() {
      _hasAttemptedSubmit = true;
    });

    if (_getHasError(_emailController, isEmail: true)) {
      return;
    }

    try {
      await _registerAdmin();
    } on FirebaseAuthException catch (e) {
      if (e.code == 'email-already-in-use') {
        _showErrorSnackBar('The email address is already registered.');
      } else {
        // Handle other FirebaseAuthExceptions
        _showErrorSnackBar('An error occurred during registration.');
      }
    } catch (e) {
      // Handle any other exceptions
      _showErrorSnackBar('An unexpected error occurred.');
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  Widget _buildPasswordInputBox() {
    return SizedBox(
      width: 300,
      child: TextField(
        controller: _passwordController,
        obscureText: !_isPasswordVisible,
        onChanged: (value) {
          // Handle the input change and update the state as needed
          setState(() {});
        },
        decoration: InputDecoration(
          labelText: _passwordController.text.isEmpty ? 'Password (6 digits or above)' : '',
          border: const OutlineInputBorder(),
          suffixIcon: GestureDetector(
            onTap: () {
              setState(() {
                _isPasswordVisible = !_isPasswordVisible;
              });
            },
            child: Icon(
              _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildConfirmPasswordInputBox() {
    return SizedBox(
      width: 300,
      child: TextField(
        controller: _confirmPasswordController,
        obscureText: !_isConfirmPasswordVisible,
        onChanged: (value) {
          // Handle the input change and update the state as needed
          setState(() {});
        },
        decoration: InputDecoration(
          labelText:
              _confirmPasswordController.text.isEmpty ? 'Confirm Password' : '',
          border: const OutlineInputBorder(),
          suffixIcon: GestureDetector(
            onTap: () {
              setState(() {
                _isConfirmPasswordVisible = !_isConfirmPasswordVisible;
              });
            },
            child: Icon(
              _isConfirmPasswordVisible
                  ? Icons.visibility
                  : Icons.visibility_off,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildButton(String label, Color color) {
    return Container(
      width: 200,
      height: 50,
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(10),
      ),
      child: TextButton(
        onPressed: () => _attemptRegister(context),
        child: Center(
          child: Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: RegisterAdminPage(),
  ));
}
